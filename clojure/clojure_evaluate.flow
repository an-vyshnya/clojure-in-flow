// export {

// 	evaluateClojure(env : ClojureEnv, form : Clojure) -> ClojureEnv;
// }

import loop;
import sandbox/clojure/clojure_lib;
import sandbox/clojure/clojure_env;
import sandbox/clojure/clojure_interop;

// Clojure loves paired arrays
splitInPairs(arr : [?], def : ?) -> [Pair<?, ?>] {
	map(splitByNumber(arr, 2), \chunk -> if (length(chunk) < 2) Pair(chunk[0], def) else Pair(chunk[0], chunk[1]))
} 

wrapInDo(exprs : [Clojure]) -> Clojure {
	CList(concat(
		[CSymbol("do", "")],
		exprs
	))
}

specialForms : ref Maybe<Tree<string, (ClojureEnv, [Clojure]) -> ClojureEnv>> = ref None();
getSpecialForms() -> Tree<string, (ClojureEnv, [Clojure]) -> ClojureEnv> {
	nth = \args, i -> elementAt(args, i, CNil());
	onlyOnce(
		specialForms, 
		\ -> pairs2tree([
			Pair("def", \env, args -> {
				evalue = evaluateClojure(env, nth(args, 1));
				setVar(evalue, getClojureSymbolName(nth(args, 0)), evalue.value)
			}),
			Pair("if", \env, args -> {
				cond = evaluateClojure(env, nth(args, 0));
				if (getClojureBool(cond.value)) { 
					evaluateClojure(cond, nth(args, 1))
				} else {
					evaluateClojure(cond, nth(args, 2))
				}
			}),
			Pair("do", \env, args -> {
				if (args == []) {
					ClojureEnv(env with value = CNil())
				} else {
					unpair(
						evaluateManyClojure(env, args),
						\ienv, results -> ClojureEnv(ienv with value = lastElement(results, CNil()))
					)
				}
			}),
			Pair("let", \env, args -> {
				nenv = setLetBindings(env, nth(args, 0));
				ClojureEnv(
					evaluateClojure(nenv, wrapInDo(tail(args)))
					with bindings = env.bindings
				)
			}),
			Pair("quote", \env, args -> {
				ClojureEnv(env with value = nth(args, 0))
			}),
			Pair("var", \env, args -> {
				ClojureEnv(env with value = nth(args, 0))
			}),
			Pair("fn", \env, args -> {
				ClojureEnv(
					env with 
						value = CList(concat([CSymbol("fn", "")], args)),
						recursionPoint = Some(CList(concat([CSymbol("fn", "")], args)))
				)
			}),
			Pair("loop", \env, args -> {
				nenv = setLetBindings(env, nth(args, 0));
				ClojureEnv(
					evaluateClojure(
						ClojureEnv(nenv with recursionPoint = Some(CList(concat([CSymbol("loop", "")], args)))), 
						wrapInDo(tail(args))
					)
					with bindings = env.bindings
				)
			}),
			Pair("recur", \env, args -> {
				eargs = evaluateManyClojure(env, args);
				eitherFn(
					env.recursionPoint,
					\recPoint -> {
						switch (recPoint : Clojure) {
							CList(values): {
								name = getClojureSymbolName(nth(values, 0));
								formArgs = tail(values);
								bindings = map(getClojureVectorValues(nth(formArgs, 0)), getClojureSymbolName);
								names = 
									if (name == "loop") {
										// We filter out all odd indicies - there were initial values there
										filtermapi(bindings, \i, b -> {
											if (i % 2 == 0) Some(b) else None()
										})
									} else if (name == "fn") {
										bindings
									} else {
										[]
									};

								if (contains(["loop", "fn"], name)) {
									Pair(names, wrapInDo(tail(formArgs)))
								} else {
									env.onError("Recursion point is set incorrectly!");
									Pair([], CNil())
								}
							}
							default: {
								env.onError("Recursion point is set incorrectly!");
								Pair([], CNil())
							}
						}
						|> unpairC(\names, body -> {
							if (length(names) != length(eargs.second)) {
								env.onError("Recursion arity doesn't match the recursion point!");
								env;
							} else {
								nenv = setParametersBindings(
									eargs.first, 
									names,
									eargs.second
								);
								// It has to be tail-recursive, but it is not. Maybe it is fine for this small example
								evaluateClojure(nenv, body)
							}
						})
					},
					\ -> {
						env.onError("Recursion point isn't set!");
						env;
					}
				)
			}),
			Pair(".", \env, args -> {
				ClojureEnv(env with value = CList(concat([CSymbol(".", "")], args)))
			})
		])
	)
}

// These bindings are not evaluated in process and don't see each other. Think function parameters.
setParametersBindings(env : ClojureEnv, names : [string], values : [Clojure]) -> ClojureEnv {
	ClojureEnv(env with bindings = setTreeValues(
		env.bindings,
		zipWith(names, values, \n, v -> Pair(n, v))
	))
}

// These bindings are evaluated in order and they see each other. Think let bindings.
setLetBindings(env : ClojureEnv, bindings : Clojure) -> ClojureEnv {
	fold(splitInPairs(getClojureVectorValues(bindings), CNil()), env, \ienv, binding -> unpair(binding, \name, value -> {
		evalue = evaluateClojure(ienv, value);
		ClojureEnv(evalue with bindings = setTree(ienv.bindings, getClojureSymbolName(name), evalue.value))
	}));
}

setVar(env : ClojureEnv, name : string, value : Clojure) -> ClojureEnv {
	eitherFn(
		lookupTree(getValue(env.vars), name),
		\valueB -> next(valueB, value),
		\ -> updateBehaviour(env.vars, \vars -> setTree(vars, name, make(value)))
	);
	env;
}

castToClojureFunction(input : Clojure) -> ClojureInvocable {
	extractParams : (Clojure) -> [string] = \expr -> {
		switch (expr : Clojure) {
			CVector(values): map(values, \v -> switch (v : Clojure) {
				CSymbol(paramName, __): paramName
				default: getClojureString(v) // Questionable!
			})
			default: []
		};
		
	}
	// exprs => [] expr | ([] expr) ([,,] expr) ...
	getBodies = \exprs -> {
		foldiUntil2(exprs, [], \i, acc, expr -> {
			switch (expr : Clojure) {
				CList(values): Pair(
					false,
					arrayPush(acc, Pair(extractParams(firstElement(values, CNil())), wrapInDo(tail(values))))
				)
				default: Pair(
					true,
					[Pair(extractParams(expr), wrapInDo(tail(exprs)))]
				)
			}
		})
	}

	switch (input : Clojure) {
		CList(values): {
			name = getClojureSymbolName(firstElement(values, CNil()));
			if (name == "fn") {
				args = tail(values);
				switch (firstElement(args, CNil()) : Clojure) {
					CSymbol(sname, __): ClojureFunction(Some(sname), getBodies(tail(args)))
					default: ClojureFunction(None(), getBodies(args))
				}
			} else if (name == ".") {
				eitherMap(
					lookupTree(getClojureInteropFunctions(), getClojureSymbolName(elementAt(values, 1, CNil()))),
					\iopfn -> ClojureInteropFunction(iopfn),
					nopClojureFinction
				)
			} else {
				nopClojureFinction
			}
		}
		default: nopClojureFinction
	}
}

invokeClojure(env : ClojureEnv, fn : ClojureInvocable, args : [Clojure]) -> ClojureEnv {
	switch (fn : ClojureInvocable) {
		ClojureFunction(name, arity): {
			n = length(args);
			// TODO: variadic arity?
			arityM = find(fn.arity, \b -> length(b.first) == n);
			eitherFn(
				arityM,
				unpairC(\params, body -> {
					nenv = setParametersBindings(env, params, args);
					resEnv = evaluateClojure(nenv, body);
					ClojureEnv(resEnv with bindings = env.bindings); //this should be fine, shouldn't it?
				}),
				\ -> {
					// Throw error!
					env;
				}
			)
		}
		ClojureInteropFunction(ifn): ClojureEnv(env with value = ifn(args))
	}
}

evaluateManyClojure(env : ClojureEnv, forms : [Clojure]) -> Pair<ClojureEnv, [Clojure]> {
	fold(forms, Pair(env, []), \p, form -> unpair(p, \ienv, acc -> {
		nenv = evaluateClojure(ienv, form);
		Pair(nenv, arrayPush(acc, nenv.value))
	}));
}

evaluateClojure(env : ClojureEnv, form : Clojure) -> ClojureEnv {
	// println("Evaluating " + toString(form));
	switch (form : Clojure) {
		CLiteral(): ClojureEnv(env with value = form);
		CVector(values): {
			unpair(
				evaluateManyClojure(env, values),
				\nenv, results -> ClojureEnv(nenv with value = CVector(results))
			)
		}
		CMap(values): {
			a = mapConcat(values, unpairC(\a, b -> [a, b]));
			unpair(
				evaluateManyClojure(env, a),
				\nenv, results -> {
					pairs = filtermapi(results, \i, r -> {
						if (i % 2 == 0) {
							Some(Pair(r, elementAt(results, i + 1, CNil())))
						} else {
							None()
						}
					})
					ClojureEnv(nenv with value = CMap(pairs))
				}
			)
		}
		CSet(values): {
			unpair(
				evaluateManyClojure(env, values),
				\nenv, results -> ClojureEnv(nenv with value = CSet(results))
			)
		}
		CList(values): {
			if (values == []) {
				ClojureEnv(env with value = CList([]))
			} else {
				fn = values[0]; // we have it for sure
				args = tail(values);
				eitherFn(
					lookupTree(getSpecialForms(), getClojureSymbolName(fn)),
					\specialFormFn -> specialFormFn(env, args),
					\ -> {
						efn = evaluateClojure(env, fn);
						eargs = evaluateManyClojure(efn, args);
						invokeClojure(eargs.first, castToClojureFunction(efn.value), eargs.second)
					}
				)
			}
		}
		// TODO: qualification?
		CSymbol(name, __): {
			res = eitherFn(
				lookupTree(env.bindings, name),
				idfn,
				\ -> eitherFn(
					lookupTree(getValue(env.vars), name),
					\value -> getValue(value),
					\ -> {
						env.onError("Symbol " + name + " can't be resolved!");
						CNil()
					}
				)
			);
			ClojureEnv(env with value = res)
		}
		default: ClojureEnv(env with value = form)
	}
}

main() {
	example = "(if false 1 2)";
	example2 = "((fn [a b c] (if a b c)) true 4 5)";
	example3 = "(def var 5) (def condvar true) (if condvar var 7)";
	letExample = "(def a 50) (def var 5) (def c (let [a var b 8] (if false a b))) [a c]";
	letExample2 = "(def a true) (def var false) (let [a var b (if a 7 90)] [a b])";
	quoteExample = "(def a '(if true 2 3)) a";
	varQuoteExample = "#'a";
	varQuoteExample2 = "(var a)";
	recurExample = "(loop [a true] (if a (recur false) [1 2 3]))";
	recurExampleFn = "(def cycle false) (def myfn (fn [a] (if a (do (def cycle true) (recur false)) [1 2 3 cycle]))) (myfn true)";
	mapSetExample = "(def mymap {:a #{(if false 4 5) 55} :b (if true 3 4)}) mymap";
	interopExample = "(+ 2 3)";

	env0 = makeEmptyClojureEnv();
	env = evaluateClojure(env0, getClojureStandardLib());

	interopExample
	|> (\e -> parseClojure(e, println))
	|> (\e -> readClojure(e))
	|> (\e -> {
		// println(e);
		evaluateClojure(env, e)
	})
	|> (\nenv -> {
		// println(nenv);
		println(nenv.value)
	});
}