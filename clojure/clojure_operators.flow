import consonance/concert/values;
import consonance/concert/init;
import text/gringo/gringo_typed_action;

export {
	concertOperators(onError : (string) -> void, isBuilt : (env : ConcertEnv, string) -> bool, parsedString : string, source : string) -> GringoTypedOperators<Concert>;
}

concertOperators(onError : (string) -> void, isBuilt : (env : ConcertEnv, string) -> bool, parsedString : string, source : string) {
	defaultEmptyConcertEnv = makeEmptyConcertEnv();
	convertPos = \pos -> posToLineNumberAndPosition(s2i(getConcertString(pos)), parsedString, source);
	operatorBuiltin = \name -> Pair(name, \a, pos, b -> CCallBuiltin(name, [a, b], convertPos(pos)));
    GringoTypedOperators(
    	// Nullary
        makeTree(),
        // Unary
		pairs2tree([
			Pair("quote", \v -> {
				CQuote(v);
			}),
			Pair("hex", \v -> {
				CInt(switch (v) {
					CText(hex): parseHex(hex);
					default: {
						onError("Expected string");
						0;
					}
				});
			}),
			Pair("unescape", \v -> {
				switch (v) {
					CText(t): CText(deserializeString(t).first);
					default: v;
				}
			}),
			Pair("object", \v -> {
				args = switch (v) {
					CArray(view, args): map(args, \arg -> {
						switch (arg) {
							CKeyValue(key, value): CKeyValue(key, value);
							default: CKeyValue("", CEmpty());
						}
					});
					default: [];
				};
				keyValues2cobject(args)
			})
		]),
		// Binary
		pairs2tree([
			Pair("negate", \pos, v -> {
				switch (v) {
					CInt(i): CInt(-i);
					CDouble(d): CDouble(-d);
					default: CCallBuiltin("-", [CInt(0), v], convertPos(pos))
				}
			}),
			Pair("not", \pos, v -> {
				CCallBuiltin("not", [v], convertPos(pos));
			}),
			Pair("id", \p, v -> {
				CVar(switch (v) {
					CText(id): id;
					default:  {
						onError("Expected string");
						"";
					}
				}, convertPos(p))
			}),
			Pair(";", \a, b -> CSequence([a, b])),
			Pair("formula", \a, b -> {
				CFormula(
					switch (a) {
						CText(t): t;
						default: {
							onError("Expected id");
							"";
						}
					}, b
				)
			}),
			Pair(":", \a, b -> CKeyValue(
				switch (a) {
					CText(t): t;
					default: {
						onError("Expected id " + toString(a));
						"";
					}
				}, b)
			),
			Pair("unquote", \p, v -> {
				CUnquote(v, convertPos(p));
			}),
			Pair("lambda", \a, b -> {
				args = switch (a) {
					CArray(view, args): map(args, \arg -> {
						switch (arg) {
							CText(id): id;
							default: "";
						}
					});
					default: [];
				};
				CLambda(args, b)
			}),
		]),
		// Ternary
		pairs2tree([
			Pair(":=", \p, a, b -> CSet(
				switch (a) {
					CText(t): t;
					default: {
						onError("Expected id " + toString(a));
						"";
					}
				}, b, convertPos(p))
			),
			Pair("if", \p, a, b -> CIf(a, b, CEmpty(), convertPos(p))),
			Pair("dot", \a, p, b -> CCallBuiltin("dot", [a, b], convertPos(p))),
			Pair("index", \a, p, b -> CCallBuiltin("index", [a, b], convertPos(p))),
			Pair("call", \a, p, b -> {
				name = getConcertString(a);
				if (isBuilt(defaultEmptyConcertEnv, name)) {
					CCallBuiltin(name, switch (b) {
						CArray(view, args): args;
						default: [b];
					}, convertPos(p))
				} else {
					CCall(a, switch (b) {
						CArray(view, args): args;
						default: [b];
					}, convertPos(p))
				}
			}),
			operatorBuiltin("&&"),
			operatorBuiltin("||"),
			operatorBuiltin("=="),
			operatorBuiltin("!="),
			operatorBuiltin("<="),
			operatorBuiltin("<"),
			operatorBuiltin(">="),
			operatorBuiltin(">"),
			operatorBuiltin("+"),
			operatorBuiltin("-"),
			operatorBuiltin("*"),
			operatorBuiltin("/"),
			Pair("%", \a, pos, b -> CCallBuiltin("MOD", [a, b], convertPos(pos))),
		]),
		// Quadranary
		pairs2tree([
			Pair("let", \a, b, c, d -> CLet(
				switch (b) {
					CText(t): t;
					default: {
						onError("Expected id");
						"";
					}
				}, c, d, convertPos(a))
			),
			Pair("ifelse", \p, a, b, c -> CIf(a, b, c, convertPos(p))),
		]),
		// Stack ops
		makeTree(),
	)
}

posToLineNumberAndPosition(pos : int, parsedString : string, source : string) -> ConcertPos {
	textBeforePos = substring(parsedString, 0, pos);
	positionOfLastNewline = strLastIndexOf(textBeforePos, "\n");
	ConcertPos(
		source,
		strCountOf(textBeforePos, "\n") + 1,
		pos - positionOfLastNewline + strCountOf(strRight(textBeforePos, positionOfLastNewline + 1), "\t") * 3
	)
}